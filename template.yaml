AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Christopher Leggett Info Website

Globals:
    Function:
      Environment:
          Variables:
              ROOT_DOMAIN_NAME: !Ref RootDomainName
              HAT_SECRET: !Ref HatSecret
    Api:
        Cors:
            AllowMethods: "'GET,POST'"
            AllowHeaders: "'accept,authorization,content-type'"
            AllowOrigin: !Sub
                - "'https://${Domain}'"
                - Domain: !Ref RootDomainName

Parameters:
    RootDomainName:
        Description: The domain name for the website
        Type: String
    HatSecret:
        Description: The secret used for encrypting hats
        Type: String

Resources:
    DNS:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            HostedZoneName: !Sub
                - ${Domain}.
                - Domain: !Ref RootDomainName
            Comment: Zone apex alias.
            RecordSets:
            -
                Name: !Ref RootDomainName
                Type: A
                AliasTarget:
                    HostedZoneId: Z2FDTNDATAQYW2
                    DNSName: !GetAtt CDN.DomainName
            -
                Name: !Sub
                    - www.${Domain}
                    - Domain: !Ref RootDomainName
                Type: CNAME
                TTL: 990
                ResourceRecords:
                - !GetAtt CDN.DomainName
    #Initial certificate validation requires manual dns entries before stack deployment completes.
    Certificate:
        Type: AWS::CertificateManager::Certificate
        Properties:
            DomainName: !Ref RootDomainName
            SubjectAlternativeNames:
                - !Join
                    - ''
                    - - '*.'
                      - !Ref RootDomainName
            ValidationMethod: DNS
    CDN:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Aliases:
                    - !Ref RootDomainName
                    - !Sub
                        - www.${Domain}
                        - Domain: !Ref RootDomainName
                CustomErrorResponses:
                    - ErrorCode: 403
                      ResponseCode: 404
                      ResponsePagePath: /errors/404.html
                Origins:
                    - DomainName: !Sub
                          - ${Domain}.s3.amazonaws.com
                          - Domain: !Ref RootDomainName
                      Id: FrontendS3Origin
                      OriginPath: /root
                      S3OriginConfig:
                          OriginAccessIdentity: !Sub
                              - origin-access-identity/cloudfront/${OriginAccessId}
                              - OriginAccessId: !Ref CDNAccessIdentity
                Enabled: 'true'
                DefaultRootObject: index.html
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    CachedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    Compress: 'true'
                    TargetOriginId: FrontendS3Origin
                    ForwardedValues:
                        QueryString: 'false'
                        Cookies:
                            Forward: none
                    ViewerProtocolPolicy: redirect-to-https
                    LambdaFunctionAssociations:
                        - EventType: viewer-request
                          LambdaFunctionARN: !Ref RedirectLambdaVersion10
                PriceClass: PriceClass_100
                Restrictions:
                    GeoRestriction:
                        RestrictionType: whitelist
                        Locations:
                          - US
                ViewerCertificate:
                    AcmCertificateArn: !Ref Certificate
                    MinimumProtocolVersion: TLSv1.1_2016
                    SslSupportMethod: sni-only
    CDNAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: Access to frontend bucket
    RedirectLambda:
        Type: AWS::Lambda::Function
        Properties:
            Description: >
                Edge Lambda performing domain redirects.
            Code: temp/build/code-backend/christopherleggett.info.zip
            Handler: edge/redirects/index.handler
            MemorySize: 128
            Role: !GetAtt RedirectLambdaExecutionRole.Arn
            Runtime: nodejs10.x
    RedirectLambdaVersion10:
        Type: AWS::Lambda::Version
        Properties:
            FunctionName: !Ref RedirectLambda
            Description: !Sub "Redirect handling for www.${RootDomainName}"
    RedirectLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - edgelambda.amazonaws.com
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
    FrontendRootBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref RootDomainName
            AccessControl: BucketOwnerFullControl
            WebsiteConfiguration:
                IndexDocument: index.html
    FrontendRootBucketCDNPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            PolicyDocument:
                Id: CDNOriginAccessPolicy
                Version: 2012-10-17
                Statement:
                    - Sid: 'Grant CDNAccessIdentity GetObject'
                      Action: 's3:GetObject'
                      Effect: Allow
                      Resource: !Join
                          - ''
                          - - 'arn:aws:s3:::'
                            - !Ref FrontendRootBucket
                            - /*
                      Principal:
                          CanonicalUser: !GetAtt CDNAccessIdentity.S3CanonicalUserId
            Bucket: !Ref FrontendRootBucket

    #Lambda Execution Role
    BackendLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: root
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - logs:*
                            Resource: arn:aws:logs:*:*:*
                          - Effect: Allow
                            Action:
                                - sns:Publish
                            Resource: "*"

    #Backend Lambdas
    InitializeSecretSanta:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: temp/build/code-backend/christopherleggett.info.zip
            Handler: index.initialize
            Runtime: nodejs10.x
            Role: !GetAtt BackendLambdaExecutionRole.Arn
            Events:
                HelloWorldGET:
                    Type: Api
                    Properties:
                        Path: /initialize
                        Method: post
    PickName:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: temp/build/code-backend/christopherleggett.info.zip
            Handler: index.pickName
            Runtime: nodejs10.x
            Role: !GetAtt BackendLambdaExecutionRole.Arn
            Events:
                HelloWorldGET:
                    Type: Api
                    Properties:
                        Path: /pick-name
                        Method: post
    RevealName:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: temp/build/code-backend/christopherleggett.info.zip
            Handler: index.revealName
            Runtime: nodejs10.x
            Events:
                HelloWorldGET:
                    Type: Api
                    Properties:
                        Path: /reveal-name
                        Method: post

Outputs:
    WebsiteURL:
        Value: !GetAtt CDN.DomainName
        Description: The URL for the website.
